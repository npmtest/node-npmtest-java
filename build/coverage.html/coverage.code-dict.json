{"/home/travis/build/npmtest/node-npmtest-java/test.js":"/* istanbul instrument in package npmtest_java */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-java/lib.npmtest_java.js":"/* istanbul instrument in package npmtest_java */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_java = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_java = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-java/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-java && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_java */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_java\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_java.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_java.rollup.js'] =\n            local.assetsDict['/assets.npmtest_java.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_java.__dirname + '/lib.npmtest_java.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/index.js":"\nmodule.exports = require(\"./lib/nodeJavaBridge\");\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/lib/nodeJavaBridge.js":"'use strict';\n\nprocess.env.PATH += require('../build/jvm_dll_path.json');\n\nvar _ = require('lodash');\nvar async = require('async');\nvar path = require('path');\nvar fs = require('fs');\nvar binaryPath = null;\ntry {\n  if(fs.statSync && fs.statSync(path.join(__dirname, \"../build/Debug/nodejavabridge_bindings.node\")).isFile()) {\n    binaryPath = path.resolve(path.join(__dirname, \"../build/Debug/nodejavabridge_bindings.node\"));\n    console.log('****** NODE-JAVA RUNNING IN DEBUG MODE ******');\n  }\n} catch(e) {\n  // do nothing fs.statSync just couldn't find the file\n}\nif (!binaryPath) {\n  binaryPath = path.resolve(path.join(__dirname, \"../build/Release/nodejavabridge_bindings.node\"));\n}\nvar bindings = require(binaryPath);\n\nvar java = module.exports = new bindings.Java();\njava.classpath.push(path.resolve(__dirname, \"../commons-lang3-node-java.jar\"));\njava.classpath.push(path.resolve(__dirname, __dirname, \"../src-java\"));\njava.classpath.pushDir = function(dir) {\n  fs.readdirSync(dir).forEach(function(file) {\n    java.classpath.push(path.resolve(dir, file));\n  });\n};\njava.nativeBindingLocation = binaryPath;\n\nvar syncSuffix = undefined;\nvar asyncSuffix = undefined;\nvar ifReadOnlySuffix = '_';\n\nvar SyncCall = function(obj, method) {\n  if (syncSuffix === undefined)\n    throw new Error('Sync call made before jvm created');\n  var syncMethodName = method + syncSuffix;\n  if (syncMethodName in obj)\n    return obj[syncMethodName].bind(obj);\n  else\n    throw new Error('Sync method not found:' + syncMethodName);\n}\n\njava.isJvmCreated = function() {\n  return typeof java.onJvmCreated !== 'function';\n}\n\nvar clients = [];\n\n// We provide two methods for 'clients' of node-java to 'register' their use of java.\n// By registering, a client gets the opportunity to be called asynchronously just before the JVM is created,\n// and just after the JVM is created. The before hook function will typically be used to add to java.classpath.\n// The function may peform asynchronous operations, such as async [glob](https://github.com/isaacs/node-glob)\n// resolutions of wild-carded file system paths, and then notify when it has finished via either calling\n// a node-style callback function, or by resolving a promise.\n\n// A client can register function hooks to be called before and after the JVM is created.\n// If the client doesn't need to be called back for either function, it can pass null or undefined.\n// Both before and after here are assumed to be functions that accept one argument that is a node-callback function.\njava.registerClient = function(before, after) {\n  var before_, after_;\n  if (java.isJvmCreated()) {\n    throw new Error('java.registerClient() called after JVM already created.');\n  }\n  before_ = (before && before.length === 0) ?\n    function(cb) { before(); cb(); } :\n    before;\n\n  after_ = (after && after.length === 0) ?\n    function(cb) { after(); cb(); } :\n    after;\n\n  clients.push({before: before_, after: after_});\n}\n\n// A client can register function hooks to be called before and after the JVM is created.\n// If the client doesn't need to be called back for either function, it can pass null or undefined.\n// Both before and after here are assumed to be functions that return Promises/A+ `thenable` objects.\njava.registerClientP = function(beforeP, afterP) {\n  if (java.isJvmCreated()) {\n    throw new Error('java.registerClient() called after JVM already created.');\n  }\n  clients.push({beforeP: beforeP, afterP: afterP});\n}\n\nfunction runBeforeHooks(done) {\n  function iterator(client, cb) {\n    try {\n      if (client.before) {\n        client.before(cb);\n      }\n      else if (client.beforeP) {\n        client.beforeP().then(function(ignored) { cb(); }, function(err) { cb(err); });\n      }\n      else {\n        cb();\n      }\n    }\n    catch (err) {\n      cb(err);\n    }\n  }\n  async.each(clients, iterator, done);\n}\n\nfunction createJVMAsync(callback) {\n  var ignore = java.newLong(0); // called just for the side effect that it will create the JVM\n  callback();\n}\n\nfunction runAfterHooks(done) {\n  function iterator(client, cb) {\n    try {\n      if (client.after) {\n        client.after(cb);\n      }\n      else if (client.afterP) {\n        client.afterP().then(function(ignored) { cb(); }, function(err) { cb(err); });\n      }\n      else {\n        cb();\n      }\n    }\n    catch (err) {\n      cb(err);\n    }\n  }\n  async.each(clients, iterator, done);\n}\n\nfunction initializeAll(done) {\n  async.series([runBeforeHooks, createJVMAsync, runAfterHooks], done);\n}\n\n// This function ensures that the JVM has been launched, asynchronously. The application can be notified\n// when the JVM is fully created via either a node callback function, or via a promise.\n// If the parameter `callback` is provided, it is assume be a node callback function.\n// If the parameter is not provided, and java.asyncOptions.promisify has been specified,\n// then this function will return a promise, by promisifying itself and then calling that\n// promisified function.\n// This function may be called multiple times -- the 2nd and subsequent calls are no-ops.\n// However, once this method has been called (or the JVM is launched as a side effect of calling other java\n// methods), then clients can no longer use the registerClient API.\njava.ensureJvm = function(callback) {\n\n  // First see if the promise-style API should be used.\n  // This must be done first in order to ensure the proper API is used.\n  if (_.isUndefined(callback) && java.asyncOptions && _.isFunction(java.asyncOptions.promisify)) {\n    // Create a promisified version of this function.\n    var launchJvmPromise = java.asyncOptions.promisify(java.ensureJvm.bind(java));\n    // Call the promisified function, returning its result, which should be a promise.\n    return launchJvmPromise();\n  }\n\n  // If we get here, callback must be a node-style callback function. If not, throw an error.\n  else if (!_.isFunction(callback)) {\n    throw new Error('java.launchJvm(cb) requires its one argument to be a callback function.');\n  }\n\n  // Now check if the JVM has already been created. If so, we assume that the jvm was already successfully\n  // launched, and we can just implement idempotent behavior, i.e. silently notify that the JVM has been created.\n  else if (java.isJvmCreated()) {\n    return setImmediate(callback);\n  }\n\n  // Finally, queue the initializeAll function.\n  else {\n    return setImmediate(initializeAll, callback);\n  }\n}\n\njava.onJvmCreated = function() {\n  if (java.asyncOptions) {\n    syncSuffix = java.asyncOptions.syncSuffix;\n    asyncSuffix = java.asyncOptions.asyncSuffix;\n    if (typeof syncSuffix !== 'string') {\n      throw new Error('In asyncOptions, syncSuffix must be defined and must a string');\n    }\n    var promiseSuffix = java.asyncOptions.promiseSuffix;\n    var promisify = java.asyncOptions.promisify;\n    if (typeof promiseSuffix === 'string' && typeof promisify === 'function') {\n      var methods = ['newInstance', 'callMethod', 'callStaticMethod'];\n      methods.forEach(function (name) {\n        java[name + promiseSuffix] = promisify(java[name]);\n      });\n    } else if (typeof promiseSuffix === 'undefined' && typeof promisify === 'undefined') {\n      // no promises\n    } else {\n      throw new Error('In asyncOptions, if either promiseSuffix or promisify is defined, both most be.');\n    }\n\n    if (_.isString(java.asyncOptions.ifReadOnlySuffix) && java.asyncOptions.ifReadOnlySuffix !== '') {\n      ifReadOnlySuffix = java.asyncOptions.ifReadOnlySuffix;\n    }\n  } else {\n    syncSuffix = 'Sync';\n    asyncSuffix = '';\n  }\n}\n\nvar MODIFIER_PUBLIC = 1;\nvar MODIFIER_STATIC = 8;\n\nfunction isWritable(prop) {\n  // If the property has no descriptor, or wasn't explicitly marked as not writable or not configurable, assume it is.\n  // We check both desc.writable and desc.configurable, since checking desc.writable alone is not sufficient\n  // (e.g. for either .caller or .arguments).\n  // It may be that checking desc.configurable is sufficient, but the specification doesn't make this definitive,\n  // and there is no harm in checking both.\n  if (prop === 'caller' || prop === 'arguments') { return false; }\n\n  var desc = Object.getOwnPropertyDescriptor(function() {}, prop) || {};\n  return desc.writable !== false &&  desc.configurable !== false;\n}\n\nfunction usableName(name) {\n  if (!isWritable(name)) {\n    name = name + ifReadOnlySuffix;\n  }\n  return name;\n}\n\njava.import = function(name) {\n  var clazz = java.findClassSync(name); // TODO: change to Class.forName when classloader issue is resolved.\n  var result = function javaClassConstructorProxy() {\n    var args = [name];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    return java.newInstanceSync.apply(java, args);\n  };\n  var i;\n\n  result.class = clazz;\n\n  // copy static fields\n  var fields = SyncCall(clazz, 'getDeclaredFields')();\n  for (i = 0; i < fields.length; i++) {\n    var modifiers = SyncCall(fields[i], 'getModifiers')();\n    if (((modifiers & MODIFIER_PUBLIC) === MODIFIER_PUBLIC)\n      && ((modifiers & MODIFIER_STATIC) === MODIFIER_STATIC)) {\n      var fieldName = SyncCall(fields[i], 'getName')();\n      var jsfieldName = usableName(fieldName);\n      result.__defineGetter__(jsfieldName, function(name, fieldName) {\n        return java.getStaticFieldValue(name, fieldName);\n      }.bind(this, name, fieldName));\n      result.__defineSetter__(jsfieldName, function(name, fieldName, val) {\n        java.setStaticFieldValue(name, fieldName, val);\n      }.bind(this, name, fieldName));\n    }\n  }\n\n  var promisify = undefined;\n  var promiseSuffix;\n  if (java.asyncOptions && java.asyncOptions.promisify) {\n    promisify = java.asyncOptions.promisify;\n    promiseSuffix = java.asyncOptions.promiseSuffix;\n  }\n\n  // copy static methods\n  var methods = SyncCall(clazz, 'getDeclaredMethods')();\n  for (i = 0; i < methods.length; i++) {\n    var modifiers = SyncCall(methods[i], 'getModifiers')();\n    if (((modifiers & MODIFIER_PUBLIC) === MODIFIER_PUBLIC)\n      && ((modifiers & MODIFIER_STATIC) === MODIFIER_STATIC)) {\n      var methodName = SyncCall(methods[i], 'getName')();\n\n      if (_.isString(syncSuffix)) {\n        var syncName = usableName(methodName + syncSuffix);\n        result[syncName] = java.callStaticMethodSync.bind(java, name, methodName);\n      }\n\n      if (_.isString(asyncSuffix)) {\n        var asyncName = usableName(methodName + asyncSuffix);\n        result[asyncName] = java.callStaticMethod.bind(java, name, methodName);\n      }\n\n      if (promisify && _.isString(promiseSuffix)) {\n        var promiseName = usableName(methodName + promiseSuffix);\n        result[promiseName] = promisify(java.callStaticMethod.bind(java, name, methodName));\n      }\n    }\n  }\n\n  // copy static classes/enums\n  var classes = SyncCall(clazz, 'getDeclaredClasses')();\n  for (i = 0; i < classes.length; i++) {\n    var modifiers = SyncCall(classes[i], 'getModifiers')();\n    if (((modifiers & MODIFIER_PUBLIC) === MODIFIER_PUBLIC)\n      && ((modifiers & MODIFIER_STATIC) === MODIFIER_STATIC)) {\n      var className = SyncCall(classes[i], 'getName')();\n      var simpleName = SyncCall(classes[i], 'getSimpleName')();\n      Object.defineProperty(result, simpleName, {\n        get: function(result, simpleName, className) {\n          var c = java.import(className);\n\n          // memoize the import\n          var d = Object.getOwnPropertyDescriptor(result, simpleName);\n          d.get = function(c) { return c; }.bind(null, c);\n          Object.defineProperty(result, simpleName, d);\n\n          return c;\n        }.bind(this, result, simpleName, className),\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/findJavaHome.js":"require('find-java-home')(function(err, home){\n  if(err){\n    console.error(\"[node-java] \"+err);\n    process.exit(1);\n  }\n  process.stdout.write(home);\n});\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/postInstall.js":"var glob = require('glob');\nvar fs = require('fs');\nvar path = require('path');\nvar os = require('os');\n\nrequire('find-java-home')(function(err, home){\n  var dll;\n  var dylib;\n  var so,soFiles;\n  var binary;\n\n  if(home){\n    dll = glob.sync('**/jvm.dll', {cwd: home})[0];\n    dylib = glob.sync('**/libjvm.dylib', {cwd: home})[0];\n    soFiles = glob.sync('**/libjvm.so', {cwd: home});\n    \n    if(soFiles.length>0)\n      so = getCorrectSoForPlatform(soFiles);\n\n    binary = dll || dylib || so;\n\n    fs.writeFileSync(\n      path.resolve(__dirname, './build/jvm_dll_path.json'),\n      binary\n      ? JSON.stringify(\n          path.delimiter\n          + path.dirname(path.resolve(home, binary))\n        )\n      : '\"\"'\n    );\n  }\n});\n\nfunction getCorrectSoForPlatform(soFiles){\n  var so = _getCorrectSoForPlatform(soFiles);\n  if (so) {\n    so = removeDuplicateJre(so);\n  }\n  return so;\n}\n\nfunction removeDuplicateJre(filePath){\n  while(filePath.indexOf('jre/jre')>=0){\n    filePath = filePath.replace('jre/jre','jre');\n  }\n  return filePath;\n}\n\nfunction _getCorrectSoForPlatform(soFiles){\n  \n  var architectureFolderNames = {\n    'ia32': 'i386',\n    'x64': 'amd64'\n  };\n\n  if(os.platform() != 'sunos')\n    return soFiles[0];\n\n  var requiredFolderName = architectureFolderNames[os.arch()];\n\n  for (var i = 0; i < soFiles.length; i++) {\n    var so = soFiles[i];\n\n    if(so.indexOf('server')>0)\n      if(so.indexOf(requiredFolderName)>0)\n        return so;\n  }\n\n  return soFiles[0];\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testHelpers.js":"var java = require(\"./\");\njava.options.push(\"-Djava.awt.headless=true\");\n//java.options.push('-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005');\n\njava.classpath.push(\"test/\");\njava.classpath.push(\"test/commons-lang3-3.1.jar\");\njava.classpath.push(\"test8/\");\n\nfunction promisifyQ(f) {\n  // Q doesn't provide a promisify function that works directly on a method.\n  // The .denodeify() (aka .nfbind()) function requires a bound function.\n  return function(/* arguments */) {\n    return require('q').nbind(f, this).apply(undefined, arguments);\n  }\n}\n\njava.asyncOptions = {\n  syncSuffix: \"Sync\",\n  asyncSuffix: \"\",\n  promiseSuffix: 'Promise',\n  promisify: require('when/node').lift         // https://github.com/cujojs/when\n\n\n// We've tested with 5 different Promises/A+ implementations:\n//   promisify: require('bluebird').promisify     // https://github.com/petkaantonov/bluebird/\n//   promisify: require('promise').denodeify      // https://github.com/then/promise\n//   promisify: require('vow-node').promisify     // https://github.com/dfilatov/vow-node\n//   promisify: require('when/node').lift         // https://github.com/cujojs/when\n//   promisify: promisifyQ                        // https://github.com/kriskowal/q requires wrapper promisifyQ.\n};\n\nmodule.exports.java = java;\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testRunner.js":"// testRunner.js\n\n// This is a custom test runner. All tests are run with nodeunit, but in separate\n// processes, which allows us to test java with different configuration options.\n\nvar async = require('async');\nvar chalk = require('chalk');\nvar childProcess = require('child_process');\nvar glob = require('glob');\nvar path = require('path');\n\nvar tests = glob.sync(path.join('testAsyncOptions', '*.js'));\n\ntests.unshift('test test8');  // Arrange to run the primary tests first, in a single process\n\nfunction runTest(testArgs, done) {\n  var cmd = 'node_modules/.bin/nodeunit ';\n  if(process.platform == \"win32\")\n    cmd = 'node_modules\\\\.bin\\\\nodeunit ';  \n  cmd += testArgs;\n  childProcess.exec(cmd, function (error, stdout, stderr) {\n    // It appears that nodeunit merges error output into the stdout\n    // so these three lines are probably useless.\n    var errText = stderr.toString();\n    if (errText !== '')\n      console.error(chalk.bold.red(errText));\n\n    process.stdout.write(stdout.toString());\n    done(error);\n  });\n}\n\nasync.eachSeries(tests, runTest, function(err) {\n  if (err) {\n    console.error(chalk.bold.red(err));\n    process.exit(1);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/test8/testLambda.js":"var java = require(\"../testHelpers\").java;\n\nvar nodeunit = require(\"nodeunit\");\nvar util = require(\"util\");\n\nexports['Java8'] = nodeunit.testCase({\n  \"call methods of a class that uses lambda expressions\": function(test) {\n    try {\n      var TestLambda = java.import('TestLambda');\n      var lambda = new TestLambda();\n      var sum = lambda.testLambdaAdditionSync(23, 42);\n      test.equal(sum, 65);\n      var diff = lambda.testLambdaSubtractionSync(23, 42);\n      test.equal(diff, -19);\n    }\n    catch (err) {\n      var unsupportedVersion = java.instanceOf(err.cause, 'java.lang.UnsupportedClassVersionError');\n      test.ok(unsupportedVersion);\n      if (unsupportedVersion)\n        console.log('JRE 1.8 not available');\n      else\n        console.error('Java8 test failed with unknown error:', err);\n    }\n    test.done();\n  }\n});\n\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testAllThreeSuffix.js":"// testAllThreeSuffix.js\n\n// All three variants have non-empty suffix, i.e a suffix is required for any variant.\n\nvar java = require(\"../\");\nvar assert = require(\"assert\");\nvar _ = require('lodash');\n\njava.asyncOptions = {\n  syncSuffix: \"Sync\",\n  asyncSuffix: \"Async\",\n  promiseSuffix: 'Promise',\n  promisify: require('when/node').lift         // https://github.com/cujojs/when\n};\n\nmodule.exports = {\n  testAPI: function(test) {\n    test.expect(6);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    test.ok(arrayList);\n    test.ok(java.instanceOf(arrayList, \"java.util.ArrayList\"));\n\n    test.ok(!_.isUndefined(arrayList.addSync), 'Expected `addSync` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.addAsync), 'Expected `addAsync` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.addPromise), 'Expected `addPromise` to be present, but it is NOT.');\n    test.ok(_.isUndefined(arrayList.add), 'Expected `add` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testImportClass: function(test) {\n    test.expect(3);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    var ArrayList = java.import(\"java.util.ArrayList\");\n    test.ok(ArrayList);\n    var arrayList = new ArrayList();\n    test.ok(arrayList);\n    test.strictEqual(arrayList.sizeSync(), 0);\n    test.done();\n  },\n\n  testStaticAPI: function(test) {\n    test.expect(6);\n    var String = java.import(\"java.lang.String\");\n    test.ok(String);\n\n    var api = _.functions(String);\n    test.ok(_.includes(api, 'formatSync'), 'Expected `formatSync` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatAsync'), 'Expected `formatAsync` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatPromise'), 'Expected `formatPromise` to be present, but it is NOT.');\n    test.ok(!_.includes(api, 'format'), 'Expected `format` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatundefined'), 'Expected `formatundefined` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testSyncCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addSync(\"hello\");\n    arrayList.addSync(\"world\");\n    test.strictEqual(arrayList.sizeSync(), 2);\n    test.done();\n  },\n\n  testStaticSyncCalls: function(test) {\n    test.expect(1);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    // Among other things, java.import creates Sync functions for static methods.\n    var String = java.import(\"java.lang.String\");\n    test.strictEqual(String.formatSync('%s--%s', \"hello\", \"world\"), \"hello--world\");\n    test.done();\n  },\n\n  testAsyncCalls: function(test) {\n    test.expect(4);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addAsync(\"hello\", function(err, result) {\n      test.ifError(err);\n      arrayList.addAsync(\"world\", function(err, result) {\n        test.ifError(err);\n        arrayList.sizeAsync(function(err, size) {\n          test.ifError(err);\n          test.strictEqual(size, 2);\n          test.done();\n        });\n      });\n    });\n  },\n\n  testPromiseCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addPromise(\"hello\")\n      .then(function () { return arrayList.addPromise(\"world\"); })\n      .then(function () { return arrayList.sizePromise(); })\n      .then(function (size) {\n        test.strictEqual(size, 2);\n        test.done();\n      });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testAsyncSuffixSyncDefault.js":"// testAsyncSuffixSyncDefault.js\n\n// Use \"Async\" for the asyncSuffix, and \"\" for the syncSuffix.\n\nvar java = require(\"../\");\nvar assert = require(\"assert\");\nvar _ = require('lodash');\n\nmodule.exports = {\n  launch: function(test) {\n    test.expect(4);\n    java.asyncOptions = {\n      syncSuffix: \"\",\n      asyncSuffix: \"Async\",\n      ifReadOnlySuffix: \"_alt\"\n    };\n\n    function before(callback) {\n      java.classpath.push('test/');\n      test.ok(!java.isJvmCreated());\n      callback();\n    }\n\n    function after(callback) {\n      test.ok(java.isJvmCreated());\n      callback();\n    }\n\n    java.registerClient(before, after);\n\n    java.ensureJvm(function(err) {\n      test.ifError(err);\n      test.ok(java.isJvmCreated());\n      test.done();\n    });\n  },\n\n  testAPI: function(test) {\n    test.expect(5);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    test.ok(arrayList);\n    test.ok(java.instanceOf(arrayList, \"java.util.ArrayList\"));\n\n    test.ok(!_.isUndefined(arrayList.addAsync), 'Expected `addAsync` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.add), 'Expected `add` to be present, but it is NOT.');\n    test.ok(_.isUndefined(arrayList.addPromise), 'Expected `addPromise` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testImportClass: function(test) {\n    test.expect(3);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    var ArrayList = java.import(\"java.util.ArrayList\");\n    test.ok(ArrayList);\n    var arrayList = new ArrayList();\n    test.ok(arrayList);\n    test.strictEqual(arrayList.size(), 0);\n    test.done();\n  },\n\n  testStaticAPI: function(test) {\n    test.expect(6);\n    var String = java.import(\"java.lang.String\");\n    test.ok(String);\n\n    var api = _.functions(String);\n    test.ok(_.includes(api, 'format'), 'Expected `format` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatAsync'), 'Expected `formatAsync` to be present, but it is NOT.');\n    test.ok(!_.includes(api, 'formatSync'), 'Expected `formatSync` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatPromise'), 'Expected `formatPromise` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatundefined'), 'Expected `formatundefined` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testSyncCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.add(\"hello\");\n    arrayList.add(\"world\");\n    test.strictEqual(arrayList.size(), 2);\n    test.done();\n  },\n\n  testStaticSyncCalls: function(test) {\n    test.expect(1);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    // Among other things, java.import creates Sync functions for static methods.\n    var String = java.import(\"java.lang.String\");\n    test.strictEqual(String.format('%s--%s', \"hello\", \"world\"), \"hello--world\");\n    test.done();\n  },\n\n  testAsyncCalls: function(test) {\n    test.expect(4);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addAsync(\"hello\", function(err, result) {\n      test.ifError(err);\n      arrayList.addAsync(\"world\", function(err, result) {\n        test.ifError(err);\n        arrayList.sizeAsync(function(err, size) {\n          test.ifError(err);\n          test.strictEqual(size, 2);\n          test.done();\n        });\n      });\n    });\n  },\n\n  // See testUnusableMethodName.js for the purpose of these last two tests.\n  // In that test, Test.name_alt() is an async method.\n  // In this test, it is a sync method.\n  testUnusableMethodNameThrows: function(test) {\n    test.expect(1);\n    var Test = java.import(\"Test\");\n    test.ok(Test);\n    test.throws(\n      function() {\n        Test.name();\n      },\n      function(err) {\n        if (err instanceof TypeError) {\n          test.done();\n          return true;\n        } else {\n          test.done(err);\n          return false;\n        }\n      }\n    );\n  },\n\n  testAlternateMethodNameWorks: function(test) {\n    test.expect(4);\n    var Test = java.import(\"Test\");\n    test.ok(Test);\n    test.strictEqual(Test.name_alt(), \"name\");\n    test.strictEqual(Test.caller_alt(), \"caller\");\n    test.strictEqual(Test.arguments_alt(), \"arguments\");\n    test.done();\n  },\n\n  testReservedFieldName: function(test) {\n    test.expect(7);\n    var TestEnum = java.import(\"Test$Enum\");\n    test.ok(TestEnum);\n\n    // 'foo' and 'bar' are valid enum names\n    test.strictEqual(TestEnum.foo.toString(), \"foo\");\n    test.strictEqual(TestEnum.bar.toString(), \"bar\");\n\n    // TestEnum.name is actually the name of the proxy constructor function.\n    test.strictEqual(TestEnum.name, \"javaClassConstructorProxy\");\n\n    // Instead we need to acccess TestEnum.name_alt\n    test.strictEqual(TestEnum.name_alt.toString(), \"name\");\n    test.strictEqual(TestEnum.caller_alt.toString(), \"caller\");\n    test.strictEqual(TestEnum.arguments_alt.toString(), \"arguments\");\n\n    test.done();\n  },\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testClientBeforeError.js":"// testClientBeforeError.js\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\n\nmodule.exports = {\n\n  clientBeforeError: function(test) {\n    test.expect(6);\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n    };\n\n    function before(callback) {\n      test.ok(!java.isJvmCreated());\n      callback(new Error('dummy error'));\n    }\n\n    java.registerClient(before);\n\n    java.ensureJvm(function(err) {\n      test.ok(_.isObject(err));\n      test.ok(err instanceof Error);\n      test.strictEqual(err.message, 'dummy error');\n      test.ok(!java.isJvmCreated());\n      test.done();\n    });\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testClientBeforeSyncThrows.js":"// testClientBeforeSyncThrows.js\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\n\nmodule.exports = {\n\n  clientBeforeSyncThrows: function(test) {\n    test.expect(6);\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n    };\n\n    function before() {\n      test.ok(!java.isJvmCreated());\n      throw new Error('dummy error');\n    }\n\n    java.registerClient(before);\n\n    java.ensureJvm(function(err) {\n      test.ok(_.isObject(err));\n      test.ok(err instanceof Error);\n      test.strictEqual(err.message, 'dummy error');\n      test.ok(!java.isJvmCreated());\n      test.done();\n    });\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testClientBeforeThrows.js":"// testClientBeforeThrows.js\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\n\nmodule.exports = {\n\n  clientBeforeThrows: function(test) {\n    test.expect(6);\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n    };\n\n    function before(callback) {\n      test.ok(!java.isJvmCreated());\n      throw new Error('dummy error');\n    }\n\n    java.registerClient(before);\n\n    java.ensureJvm(function(err) {\n      test.ok(_.isObject(err));\n      test.ok(err instanceof Error);\n      test.strictEqual(err.message, 'dummy error');\n      test.ok(!java.isJvmCreated());\n      test.done();\n    });\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testClientPBeforeError.js":"// testClientPBeforeError.js\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\nvar when = require('when');\n\nmodule.exports = {\n\n  clientPBeforeError: function(test) {\n    test.expect(6);\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n      promiseSuffix: 'Promise',\n      promisify: require('when/node').lift         // https://github.com/cujojs/when\n    };\n\n    function beforeP() {\n      var promise = when.promise(function(resolve, reject) {\n        test.ok(!java.isJvmCreated());\n        reject(new Error('dummy error'));\n      });\n      return promise;\n    }\n\n    java.registerClientP(beforeP);\n\n    java.ensureJvm().done(\n      function () {\n        test.ok(false);\n      },\n      function(err) {\n        test.ok(_.isObject(err));\n        test.ok(err instanceof Error);\n        test.strictEqual(err.message, 'dummy error');\n        test.ok(!java.isJvmCreated());\n        test.done();\n      }\n    );\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testClientPBeforeThrows.js":"// testClientPBeforeThrows.js\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\nvar when = require('when');\n\nmodule.exports = {\n\n  clientPBeforeThrows: function(test) {\n    test.expect(6);\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n      promiseSuffix: 'Promise',\n      promisify: require('when/node').lift         // https://github.com/cujojs/when\n    };\n\n    function beforeP() {\n      var promise = when.promise(function(resolve, reject) {\n        test.ok(!java.isJvmCreated());\n        throw new Error('dummy error');\n      });\n      return promise;\n    }\n\n    java.registerClientP(beforeP);\n\n    java.ensureJvm().done(\n      function () {\n        test.ok(false);\n      },\n      function(err) {\n        test.ok(_.isObject(err));\n        test.ok(err instanceof Error);\n        test.strictEqual(err.message, 'dummy error');\n        test.ok(!java.isJvmCreated());\n        test.done();\n      }\n    );\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testDefacto.js":"// testDefacto.js\n\n// In the defacto case, the developer sets asyncOptions, but specifies the defacto standard behavior.\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\n\nmodule.exports = {\n\n  launch: function(test) {\n    test.expect(9);\n    var api = _.functions(java);\n    test.ok(_.includes(api, 'isJvmCreated'), 'Expected `isJvmCreated` to be present, but it is NOT.');\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n      asyncSuffix: \"\"\n    };\n\n    function before() {\n      test.ok(!java.isJvmCreated());\n    }\n\n    function after() {\n      test.ok(java.isJvmCreated());\n    }\n\n    java.registerClient(before, after);\n    java.registerClient(undefined, after);\n    java.registerClient(before, undefined);\n\n    java.ensureJvm(function(err) {\n      test.ifError(err);\n      test.ok(java.isJvmCreated());\n\n      // Verify that ensureJvm is idempotent\n      java.ensureJvm(function(err) {\n        test.ifError(err);\n        test.done();\n      });\n    });\n  },\n\n  testAPI: function(test) {\n    test.expect(5);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    test.ok(arrayList);\n    test.ok(java.instanceOf(arrayList, \"java.util.ArrayList\"));\n\n    test.ok(!_.isUndefined(arrayList.addSync), 'Expected `addSync` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.add), 'Expected `add` to be present, but it is NOT.');\n    test.ok(_.isUndefined(arrayList.addPromise), 'Expected `addPromise` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testImportClass: function(test) {\n    test.expect(3);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    var ArrayList = java.import(\"java.util.ArrayList\");\n    test.ok(ArrayList);\n    var arrayList = new ArrayList();\n    test.ok(arrayList);\n    test.strictEqual(arrayList.sizeSync(), 0);\n    test.done();\n  },\n\n  testStaticAPI: function(test) {\n    test.expect(6);\n    var String = java.import(\"java.lang.String\");\n    test.ok(String);\n\n    var api = _.functions(String);\n    test.ok(_.includes(api, 'format'), 'Expected `format` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatSync'), 'Expected `formatSync` to be present, but it is NOT.');\n    test.ok(!_.includes(api, 'formatAsync'), 'Expected `formatAsync` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatPromise'), 'Expected `formatPromise` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatundefined'), 'Expected `formatundefined` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testSyncCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addSync(\"hello\");\n    arrayList.addSync(\"world\");\n    test.strictEqual(arrayList.sizeSync(), 2);\n    test.done();\n  },\n\n  testStaticSyncCalls: function(test) {\n    test.expect(1);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    // Among other things, java.import creates Sync functions for static methods.\n    var String = java.import(\"java.lang.String\");\n    test.strictEqual(String.formatSync('%s--%s', \"hello\", \"world\"), \"hello--world\");\n    test.done();\n  },\n\n  testAsyncCalls: function(test) {\n    test.expect(4);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.add(\"hello\", function(err, result) {\n      test.ifError(err);\n      arrayList.add(\"world\", function(err, result) {\n        test.ifError(err);\n        arrayList.size(function(err, size) {\n          test.ifError(err);\n          test.strictEqual(size, 2);\n          test.done();\n        });\n      });\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testDefactoPlusPromise.js":"// testDefactoPlusPromise.js\n\n// The defacto case but with promises also enabled.\n\nvar java = require(\"../\");\nvar assert = require(\"assert\");\nvar _ = require(\"lodash\");\n\nmodule.exports = {\n  launch: function(test) {\n    test.expect(7);\n    var api = _.functions(java);\n    test.ok(_.includes(api, 'isJvmCreated'), 'Expected `isJvmCreated` to be present, but it is NOT.');\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n      asyncSuffix: \"\",\n      promiseSuffix: 'Promise',\n      promisify: require('when/node').lift         // https://github.com/cujojs/when\n    };\n\n    function before(callback) {\n      test.ok(!java.isJvmCreated());\n      callback();\n    }\n\n    function after(callback) {\n      test.ok(java.isJvmCreated());\n      callback();\n    }\n\n    java.registerClient(before, after);\n    java.registerClient(null, after);\n    java.registerClient(before);\n\n    java.ensureJvm().done(function() {\n      test.ok(java.isJvmCreated());\n      test.done();\n    });\n  },\n\n  testAPI: function(test) {\n    test.expect(5);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    test.ok(arrayList);\n    test.ok(java.instanceOf(arrayList, \"java.util.ArrayList\"));\n\n    test.ok(!_.isUndefined(arrayList.addSync), 'Expected `addSync` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.add), 'Expected `add` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.addPromise), 'Expected `addPromise` to be present, but it is NOT.');\n    test.done();\n  },\n\n  testImportClass: function(test) {\n    test.expect(3);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    var ArrayList = java.import(\"java.util.ArrayList\");\n    test.ok(ArrayList);\n    var arrayList = new ArrayList();\n    test.ok(arrayList);\n    test.strictEqual(arrayList.sizeSync(), 0);\n    test.done();\n  },\n\n  testStaticAPI: function(test) {\n    test.expect(6);\n    var String = java.import(\"java.lang.String\");\n    test.ok(String);\n\n    var api = _.functions(String);\n    test.ok(_.includes(api, 'format'), 'Expected `format` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatSync'), 'Expected `formatSync` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatPromise'), 'Expected `formatPromise` to be present, but it is NOT.');\n    test.ok(!_.includes(api, 'formatAsync'), 'Expected `formatAsync` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatundefined'), 'Expected `formatundefined` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testSyncCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addSync(\"hello\");\n    arrayList.addSync(\"world\");\n    test.strictEqual(arrayList.sizeSync(), 2);\n    test.done();\n  },\n\n  testStaticSyncCalls: function(test) {\n    test.expect(1);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    // Among other things, java.import creates Sync functions for static methods.\n    var String = java.import(\"java.lang.String\");\n    test.strictEqual(String.formatSync('%s--%s', \"hello\", \"world\"), \"hello--world\");\n    test.done();\n  },\n\n  testAsyncCalls: function(test) {\n    test.expect(4);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.add(\"hello\", function(err, result) {\n      test.ifError(err);\n      arrayList.add(\"world\", function(err, result) {\n        test.ifError(err);\n        arrayList.size(function(err, size) {\n          test.ifError(err);\n          test.strictEqual(size, 2);\n          test.done();\n        });\n      });\n    });\n  },\n\n  testPromiseCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addPromise(\"hello\")\n      .then(function () { return arrayList.addPromise(\"world\"); })\n      .then(function () { return arrayList.sizePromise(); })\n      .then(function (size) {\n        test.strictEqual(size, 2);\n        test.done();\n      });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testDefault.js":"// testDefault.js\n\n// In the default case, the developer does not set asyncOptions.\n// We should get the defacto standard behavior.\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\n\njava.asyncOptions = undefined;\n\nmodule.exports = {\n  testAPI: function(test) {\n    test.expect(5);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    test.ok(arrayList);\n    test.ok(java.instanceOf(arrayList, \"java.util.ArrayList\"));\n\n    test.ok(!_.isUndefined(arrayList.addSync), 'Expected `addSync` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.add), 'Expected `add` to be present, but it is NOT.');\n    test.ok(_.isUndefined(arrayList.addPromise), 'Expected `addPromise` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testImportClass: function(test) {\n    test.expect(3);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    var ArrayList = java.import(\"java.util.ArrayList\");\n    test.ok(ArrayList);\n    var arrayList = new ArrayList();\n    test.ok(arrayList);\n    test.strictEqual(arrayList.sizeSync(), 0);\n    test.done();\n  },\n\n  testStaticAPI: function(test) {\n    test.expect(6);\n    var String = java.import(\"java.lang.String\");\n    test.ok(String);\n\n    var api = _.functions(String);\n    test.ok(_.includes(api, 'format'), 'Expected `format` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatSync'), 'Expected `formatSync` to be present, but it is NOT.');\n    test.ok(!_.includes(api, 'formatAsync'), 'Expected `formatAsync` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatPromise'), 'Expected `formatPromise` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatundefined'), 'Expected `formatundefined` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testSyncCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addSync(\"hello\");\n    arrayList.addSync(\"world\");\n    test.strictEqual(arrayList.sizeSync(), 2);\n    test.done();\n  },\n\n  testStaticSyncCalls: function(test) {\n    test.expect(1);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    // Among other things, java.import creates Sync functions for static methods.\n    var String = java.import(\"java.lang.String\");\n    test.strictEqual(String.formatSync('%s--%s', \"hello\", \"world\"), \"hello--world\");\n    test.done();\n  },\n\n  testAsyncCalls: function(test) {\n    test.expect(4);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.add(\"hello\", function(err, result) {\n      test.ifError(err);\n      arrayList.add(\"world\", function(err, result) {\n        test.ifError(err);\n        arrayList.size(function(err, size) {\n          test.ifError(err);\n          test.strictEqual(size, 2);\n          test.done();\n        });\n      });\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testInvalidLaunch.js":"// testInvalidLaunch.js\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\n\nmodule.exports = {\n\n  failedLaunch: function(test) {\n    test.expect(3);\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n      asyncSuffix: \"\"\n    };\n\n    // First show that if asyncOptions.promisify is undefined, using the promise variant of ensureJvm throws an error.\n    test.throws(function() { java.ensureJvm(); }, Error, /requires its one argument to be a callback function/);\n\n    test.ok(!java.isJvmCreated());\n    test.done();\n  },\n\n  callbackNotAFunction: function(test) {\n    test.expect(3);\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"\",\n      promiseSuffix: 'P',\n      promisify: require('when/node').lift         // https://github.com/cujojs/when\n    };\n\n    test.throws(function() { java.ensureJvm('foo'); }, Error, /requires its one argument to be a callback function/);\n\n    test.ok(!java.isJvmCreated());\n    test.done();\n  },\n\n  jvmCanStillBeLaunched: function(test) {\n    // None of the previous tests should have caused the JVM to be created, so it should still be possible to create one.\n\n    test.expect(2);\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"\",\n      promiseSuffix: 'P',\n      promisify: require('when/node').lift         // https://github.com/cujojs/when\n    };\n\n    java.ensureJvm().done(function() {\n      test.ok(java.isJvmCreated());\n      test.done();\n    });\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testNoAsync.js":"// testNoAsync.js\n\n// Just Sync and Promise, both with a non-empty suffix.\n\nvar java = require(\"../\");\nvar assert = require(\"assert\");\nvar _ = require('lodash');\nvar when = require('when');\n\nmodule.exports = {\n  launch: function(test) {\n    test.expect(7);\n    var api = _.functions(java);\n    test.ok(_.includes(api, 'isJvmCreated'), 'Expected `isJvmCreated` to be present, but it is NOT.');\n    test.ok(!java.isJvmCreated());\n\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n      promiseSuffix: 'Promise',\n      promisify: require('when/node').lift\n    };\n\n    function before() {\n      var promise = when.promise(function(resolve, reject) {\n        test.ok(!java.isJvmCreated());\n        resolve();\n      });\n      return promise;\n    }\n\n    function after() {\n      var promise = when.promise(function(resolve, reject) {\n        test.ok(java.isJvmCreated());\n        resolve();\n      });\n      return promise;\n    }\n\n    java.registerClientP(before, after);\n    java.registerClientP(null, after);\n    java.registerClientP(before);\n\n    java.ensureJvm().done(function() {\n      test.ok(java.isJvmCreated());\n      test.done();\n    });\n  },\n\n  testAPI: function(test) {\n    test.expect(6);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    test.ok(arrayList);\n    test.ok(java.instanceOf(arrayList, \"java.util.ArrayList\"));\n\n    test.ok(!_.isUndefined(arrayList.addSync), 'Expected `addSync` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.addPromise), 'Expected `addPromise` to be present, but it is NOT.');\n    test.ok(_.isUndefined(arrayList.add), 'Expected `add` to NOT be present, but it is.');\n    test.ok(_.isUndefined(arrayList.addAsync), 'Expected `addAsync` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testImportClass: function(test) {\n    test.expect(3);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    var ArrayList = java.import(\"java.util.ArrayList\");\n    test.ok(ArrayList);\n    var arrayList = new ArrayList();\n    test.ok(arrayList);\n    test.strictEqual(arrayList.sizeSync(), 0);\n    test.done();\n  },\n\n  testStaticAPI: function(test) {\n    test.expect(6);\n    var String = java.import(\"java.lang.String\");\n    test.ok(String);\n\n    var api = _.functions(String);\n    test.ok(_.includes(api, 'formatSync'), 'Expected `formatSync` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatPromise'), 'Expected `formatPromise` to be present, but it is NOT.');\n    test.ok(!_.includes(api, 'format'), 'Expected `format` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatAsync'), 'Expected `formatAsync` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatundefined'), 'Expected `formatundefined` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testSyncCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addSync(\"hello\");\n    arrayList.addSync(\"world\");\n    test.strictEqual(arrayList.sizeSync(), 2);\n    test.done();\n  },\n\n  testStaticSyncCalls: function(test) {\n    test.expect(1);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    // Among other things, java.import creates Sync functions for static methods.\n    var String = java.import(\"java.lang.String\");\n    test.strictEqual(String.formatSync('%s--%s', \"hello\", \"world\"), \"hello--world\");\n    test.done();\n  },\n\n  testPromiseCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addPromise(\"hello\")\n      .then(function () { return arrayList.addPromise(\"world\"); })\n      .then(function () { return arrayList.sizePromise(); })\n      .then(function (size) {\n        test.strictEqual(size, 2);\n        test.done();\n      });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testSyncDefaultPlusPromise.js":"// testSyncDefaultPlusPromise.js\n\n// Just Sync and Promise, with Sync the default (i.e. no suffix).\n// This is the configuration that RedSeal wants for use with Tinkerpop/Gremlin.\n\nvar java = require(\"../\");\nvar assert = require(\"assert\");\nvar _ = require('lodash');\n\njava.asyncOptions = {\n  syncSuffix: \"\",\n  promiseSuffix: 'P',\n  promisify: require('when/node').lift         // https://github.com/cujojs/when\n};\n\nmodule.exports = {\n  testAPI: function(test) {\n    test.expect(6);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    test.ok(arrayList);\n    test.ok(java.instanceOf(arrayList, \"java.util.ArrayList\"));\n\n    test.ok(!_.isUndefined(arrayList.add), 'Expected `add` to be present, but it is NOT.');\n    test.ok(!_.isUndefined(arrayList.addP), 'Expected `addP` to be present, but it is NOT.');\n    test.ok(_.isUndefined(arrayList.addSync), 'Expected `addSync` to NOT be present, but it is.');\n    test.ok(_.isUndefined(arrayList.addAsync), 'Expected `addAsync` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testImportClass: function(test) {\n    test.expect(3);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    // This test verifies the import runs without error.\n    var ArrayList = java.import(\"java.util.ArrayList\");\n    test.ok(ArrayList);\n    var arrayList = new ArrayList();\n    test.ok(arrayList);\n    test.strictEqual(arrayList.size(), 0);\n    test.done();\n  },\n\n  testStaticAPI: function(test) {\n    test.expect(6);\n    var String = java.import(\"java.lang.String\");\n    test.ok(String);\n\n    var api = _.functions(String);\n    test.ok(_.includes(api, 'format'), 'Expected `format` to be present, but it is NOT.');\n    test.ok(_.includes(api, 'formatP'), 'Expected `formatP` to be present, but it is NOT.');\n    test.ok(!_.includes(api, 'formatSync'), 'Expected `formatSync` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatAsync'), 'Expected `formatAsync` to NOT be present, but it is.');\n    test.ok(!_.includes(api, 'formatundefined'), 'Expected `formatundefined` to NOT be present, but it is.');\n    test.done();\n  },\n\n  testSyncCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.add(\"hello\");\n    arrayList.add(\"world\");\n    test.strictEqual(arrayList.size(), 2);\n    test.done();\n  },\n\n  testStaticSyncCalls: function(test) {\n    test.expect(1);\n    // Note: java.import executes javascript code in lib/nodeJavaBridge that makes sync calls to java classes.\n    // Among other things, java.import creates Sync functions for static methods.\n    var String = java.import(\"java.lang.String\");\n    test.strictEqual(String.format('%s--%s', \"hello\", \"world\"), \"hello--world\");\n    test.done();\n  },\n\n  testPromiseCalls: function(test) {\n    test.expect(1);\n    var arrayList = java.newInstanceSync(\"java.util.ArrayList\");\n    arrayList.addP(\"hello\")\n      .then(function () { return arrayList.addP(\"world\"); })\n      .then(function () { return arrayList.sizeP(); })\n      .then(function (size) {\n        test.strictEqual(size, 2);\n        test.done();\n      });\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-java/node_modules/java/testAsyncOptions/testUnusableMethodName.js":"// testUnusableMethodName.js\n\n// For any function, the property 'name' is an unwritable property.\n// The value returned by java.import(<classname>) is a constructor-like function that has the shape of the class.\n// In particular, any static methods of the class will be added as properties of the function.\n// If a class has a static method named 'name', then an exception woudld be thrown when\n// node-java attempts to set assign the static method to the .name property of constructor-like function.\n// As a workaround, node-java will append the `ifReadOnlySuffix` to the property name.\n\nvar _ = require('lodash');\nvar java = require(\"../\");\nvar nodeunit = require(\"nodeunit\");\n\nmodule.exports = {\n\n  launch: function(test) {\n    test.expect(4);\n    java.asyncOptions = {\n      syncSuffix: \"Sync\",\n      asyncSuffix: \"\",\n      ifReadOnlySuffix: \"_alt\"\n    };\n\n    function before(callback) {\n      java.classpath.push('test/');\n      test.ok(!java.isJvmCreated());\n      callback();\n    }\n\n    function after(callback) {\n      test.ok(java.isJvmCreated());\n      callback();\n    }\n\n    java.registerClient(before, after);\n\n    java.ensureJvm(function(err) {\n      test.ifError(err);\n      test.ok(java.isJvmCreated());\n      test.done();\n    });\n  },\n\n  testUnusableMethodName_nameThrows: function(test) {\n    test.expect(1);\n    var Test = java.import(\"Test\");\n    test.ok(Test);\n    test.throws(\n      function() {\n        Test.name(function(err) {\n          test.fail();  // should not get here\n        });\n      },\n      function(err) {\n        if (err instanceof TypeError) {\n          test.done();\n          return true;\n        } else {\n          test.done(err);\n          return false;\n        }\n      }\n    );\n  },\n\n  testUnusableMethodName_callerThrows: function(test) {\n    test.expect(1);\n    var Test = java.import(\"Test\");\n    test.ok(Test);\n    test.throws(\n      function() {\n        Test.caller(function(err) {\n          test.fail();  // should not get here\n        });\n      },\n      function(err) {\n        if (err instanceof TypeError) {\n          test.done();\n          return true;\n        } else {\n          test.done(err);\n          return false;\n        }\n      }\n    );\n  },\n\n  testUnusableMethodName_argumentsThrows: function(test) {\n    test.expect(1);\n    var Test = java.import(\"Test\");\n    test.ok(Test);\n    test.throws(\n      function() {\n        Test.arguments(function(err) {\n          test.fail();  // should not get here\n        });\n      },\n      function(err) {\n        if (err instanceof TypeError) {\n          test.done();\n          return true;\n        } else {\n          test.done(err);\n          return false;\n        }\n      }\n    );\n  },\n\n  testAlternateMethodName_name_altWorks: function(test) {\n    test.expect(3);\n    var Test = java.import(\"Test\");\n    test.ok(Test);\n    Test.name_alt(function(err, val) {\n      test.ifError(err);\n      test.strictEqual(val, \"name\");\n      test.done();\n    });\n  },\n\n  testAlternateMethodName_caller_altWorks: function(test) {\n    test.expect(3);\n    var Test = java.import(\"Test\");\n    test.ok(Test);\n    Test.caller_alt(function(err, val) {\n      test.ifError(err);\n      test.strictEqual(val, \"caller\");\n      test.done();\n    });\n  },\n\n  testAlternateMethodName_arguments_altWorks: function(test) {\n    test.expect(3);\n    var Test = java.import(\"Test\");\n    test.ok(Test);\n    Test.arguments_alt(function(err, val) {\n      test.ifError(err);\n      test.strictEqual(val, \"arguments\");\n      test.done();\n    });\n  },\n\n  testReservedFieldName: function(test) {\n    test.expect(7);\n    var TestEnum = java.import(\"Test$Enum\");\n    test.ok(TestEnum);\n\n    // 'foo' and 'bar' are valid enum names\n    test.strictEqual(TestEnum.foo.toStringSync(), \"foo\");\n    test.strictEqual(TestEnum.bar.toStringSync(), \"bar\");\n\n    // TestEnum.name is actually the name of the proxy constructor function.\n    test.strictEqual(TestEnum.name, \"javaClassConstructorProxy\");\n\n    // Instead we need to acccess TestEnum.name_alt\n    test.strictEqual(TestEnum.name_alt.toString(), \"name\");\n    test.strictEqual(TestEnum.caller_alt.toString(), \"caller\");\n    test.strictEqual(TestEnum.arguments_alt.toString(), \"arguments\");\n\n    test.done();\n  },\n}\n"}